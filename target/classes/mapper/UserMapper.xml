<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qf.myblog.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.qf.myblog.pojo.User" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_password" property="userPassword" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.qf.myblog.pojo.User" >
    insert into t_user (user_id, user_name, user_password
      )
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.qf.myblog.pojo.User" >
    update t_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select user_id, user_name, user_password
    from t_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select user_id, user_name, user_password
    from t_user
  </select>
  <!--dao里面的方法返回一个对象   那么mapper，xml里面sql也只会返回一个对象（前提查询结果必须唯一）-->
  <!--dao里面的方法返回一个list集合   那么mapper，xml里面的sql也会返回一个list集合-->
  <select id="selectByName" parameterType="string" resultMap="BaseResultMap">
    select user_id,user_name,user_password
    from t_user
    where user_name = #{value}
  </select>
</mapper>